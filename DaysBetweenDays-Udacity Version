# Credit goes to Websten from forums
#
# Use Dave's suggestions to finish your daysBetweenDates
# procedure. It will need to take into account leap years
# in addition to the correct number of days in each month.

daysOfMonths = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ]



def isLeapYear(year):
    if year % 4 != 0:
        return False
    elif year % 100 != 0:
        return True
    elif year % 400 != 0:
        return False

def nextDay(year, month, day):
    """
    Returns the year, month, day of the next day.
    Simple version: assume every month has 30 days.
    """
    # YOUR CODE HERE
    if month == 12 and day == daysOfMonths[11]: # Check if last day of December
        month, day = 1, 1
        year += 1
    elif month == 2 and day == 29: # Move month if leap year.
         month += 1
         day = 1
    elif day == daysOfMonths[month-1]:
         month += 1
         day = 1
    else:
        day +=1

    return year, month, day

def dateIsBefore(year1, month1, day1, year2, month2, day2):
    """Returns True if year1-month1-day1 is before year2-month2-day2. Otherwise, returns False."""
    if year1 < year2:
        return True
    if year1 == year2:
        if month1 < month2:
            return True
        if month1 == month2:
            return day1 < day2
    return False

def daysBetweenDates(year1, month1, day1, year2, month2, day2):
    """Returns the number of days between year1/month1/day1
       and year2/month2/day2. Assumes inputs are valid dates
       in Gregorian calendar."""
    # program defensively! Add an assertion if the input is not valid!
    assert not dateIsBefore(year2, month2, day2, year1, month1, day1)
    total_days = 0
    check_leap_year = 0
    counter = 0
    while dateIsBefore(year1, month1, day1, year2, month2, day2):
        year1, month1, day1 = nextDay(year1, month1, day1)
        #print year1, month1, day1
        total_days += 1
        counter += 1
        while check_leap_year != year1:
            check_leap_year = year1
            if isLeapYear(year1) == True and month1 <= 2 and day2 !=28:
                #print "Entered the IF Statement"
                total_days +=1
    return total_days

def test():
    test_cases = [((2012,1,1,2012,2,28), 58),
                  ((2012,1,1,2012,3,1), 60),
                  ((2011,6,30,2012,6,30), 366),
                  ((2011,1,1,2012,8,8), 585 ),
                  ((1900,1,1,1999,12,31), 36523)]

    for (args, answer) in test_cases:
        result = daysBetweenDates(*args)
        if result != answer:
            print "Test with data:", args, "failed." "Days", result
        else:
            print "Test case passed!"

test()

#print daysBetweenDates(1981,2,9,2016,3,3)
print daysBetweenDates(2012, 9, 30, 2012, 10, 30)
#>>Return 12,806